<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:jaxws="http://cxf.apache.org/jaxws" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
			http://www.springframework.org/schema/aop 
			http://www.springframework.org/schema/aop/spring-aop-3.0.xsd  
			http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context-3.0.xsd 
			http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd
           	http://www.springframework.org/schema/tx 
           	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
			http://cxf.apache.org/jaxws 
		    http://cxf.apache.org/schemas/jaxws.xsd">
	<import resource="classpath:META-INF/cxf/cxf.xml" />
	<import resource="classpath:META-INF/cxf/cxf-extension-soap.xml" />
	<import resource="classpath:META-INF/cxf/cxf-servlet.xml" />

	<!-- cxf web servcie 配置，其中implementor 可以是接口实现类上的注解@Service("RuleWebservice") 
		也可以是完整的实现类路径com.service.IHelloServiceImpl -->
<!-- 	<jaxws:endpoint id="Ruleservice" implementor="#RuleWebservice" -->
<!-- 		address="/powerwebservice" publish="true"> -->
<!-- 		<jaxws:features> -->
<!-- 			<bean class="org.apache.cxf.feature.LoggingFeature" /> -->
<!-- 		</jaxws:features> -->
<!-- 	</jaxws:endpoint> -->
	<!-- 配置占位符后处理器，将properties文件中的值替换文中出现的${} -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"
		lazy-init="false">
		<property name="locations">
			<list>
				<value>classpath*:config.properties
				</value>
			</list>
		</property>
	</bean>
	<!-- 启用注解模式 -->
	<context:annotation-config />
	<!-- 指定spring自动扫描路径 -->
	<context:component-scan base-package="com.*" />
	<!-- 配置数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		init-method="createDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.user}" />
		<property name="password" value="${jdbc.password}" />
		<property name="maxActive" value="100" />
		<property name="initialSize" value="20" />
		<property name="maxWait" value="60000" />
		<property name="maxIdle" value="20" />
		<property name="minIdle" value="6" />
		<property name="removeAbandoned" value="true" />
		<property name="removeAbandonedTimeout" value="180" />
	</bean>
	<!-- 配置sessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<property name="mapperLocations" value="classpath*:com/datas/project/**/model/*.xml" />
	</bean>
	<!-- 配置Mapper配置文件的映射DAO -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"
		depends-on="dataSource">
		<property name="basePackage" value="com.datas.project.**.dao" />
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	<!-- 启用该方法，可以直接调用Spring 的SqlSession ，观察SpringDBUtil.java -->
	<bean class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	<!-- 对数据源指定事务类，配置事务控制 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>
	<!-- 开启事务支持，如果没有该行代码，spring事务将不起作用 -->
	<tx:annotation-driven />
	<aop:aspectj-autoproxy />
</beans>
